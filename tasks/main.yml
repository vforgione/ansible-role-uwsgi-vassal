---

# system packages

- name: apt installing uwsgi build requirements
  apt:
    pkg:
      - build-essential
      - gcc
  become: yes
  tags:
    - uwsgi-emperor

# app user

- name: creating the {{ app_user }} user
  user:
    name: "{{ app_user }}"
    shell: /bin/bash
    createhome: yes
    group: "{{ app_group }}"
  become: yes

# app dirs

- name: creating {{ apps_dir }} directory
  file:
    path: "{{ apps_dir }}"
    state: directory
    mode: 0755
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
  become: yes

- name: creating app source directory
  file:
    path: "{{ source_dir }}"
    state: directory
    mode: 0755
    owner: "{{ app_user }}"
    group: www-data
  become: yes

# clone project

- name: installing git
  apt:
    name: git
    state: present
  when: repo is defined
  become: yes

- name: "creating source directory {{ source_dir }}"
  file:
    path: "{{ source_dir }}"
    state: directory
    owner: "{{ ansible_user }}"  # Temporarily set to this user for SSH forwarding
    group: "{{ ansible_user }}"
    recurse: yes
  become: yes
  when: repo is defined

- file:
    path: "{{ source_dir }}"
    mode: 0777
    state: directory
  become: yes
  when: repo is defined

- name: "cloning repo {{ repo }} into {{ source_dir }}"
  git:
    repo: "{{ repo }}"
    dest: "{{ source_dir }}"
    accept_hostkey: yes
    version: "{{ branch | default('master') }}"
    force: yes
  when: repo is defined

- name: set app code user and group permissions
  file:
    path: "{{ source_dir }}"
    state: directory
    recurse: yes
    owner: "{{ app_user }}"
    group: www-data
  become: yes
  when: repo is defined

- name: chmoding app code dir
  file:
    path: "{{ source_dir }}"
    state: directory
    mode: 0755
  become: yes
  when: repo is defined

# setup virtualenv

- name: creating virtualenv directory
  file:
    path: "{{ virtualenv_dir }}"
    state: directory
    mode: 0775
    owner: "{{ app_user }}"
    group: www-data
  become: yes

# pip install stuff

- name: pip installing python packages
  pip:
    name: "{{ item }}"
    state: present
    virtualenv: "{{ virtualenv_dir }}"
    virtualenv_python: "python{{ python_version }}"
    chdir: "{{ source_dir }}"
  with_items: "{{ python_packages }}"
  when: python_packages is defined
  become: yes
  become_user: "{{ app_user }}"

- name: pip installing requirements
  pip:
    requirements: "{{ requirements_file }}"
    virtualenv: "{{ virtualenv_dir }}"
    virtualenv_python: "python{{ python_version }}"
    chdir: "{{ source_dir }}"
  when: requirements_file is defined
  become: yes
  become_user: "{{ app_user }}"

# vassal ini

- name: creating vassal ini file
  template:
    src: vassal.ini.j2
    dest: /etc/uwsgi-emperor/vassals/{{ app_name }}.ini
    owner: "{{ app_user }}"
    group: www-data
  when: app_enabled
  become: yes
  notify: restart uwsgi

- name: creating {{ app_name }} socket for nginx/uwsgi
  file:
    path: "/tmp/{{ app_name }}.sock"
    state: touch
    owner: "{{ app_user }}"
    group: www-data
  become: yes

- name: making sure uwsgi is running
  service:
    name: uwsgi-emperor
    state: restarted
  become: yes
